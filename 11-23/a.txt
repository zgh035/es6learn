<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
<template>
    <div class="bim-filter-tree">
        <el-input
            v-model="filterText"
            class="keyword-search"
            :placeholder="language.input.keyword">
        </el-input>

        <el-tree
            ref="companyTree"
            :data="tree"
            :props="defaultProps"
            default-expand-all
            :expand-on-click-node="false"
            :render-content="renderContent"
            :filter-node-method="filterNode"
            @node-click="getChosedTree">
        </el-tree>

        <div v-show="isSearchEmpty" class="no-match-message">{{language.select.noMatch}}</div>
    </div>
</template>
<script>
    import { mapState } from 'vuex'

    export default {
        props : [
            'treeStyle',
            'tree'
        ],
        data() {
            return {
                //默认配置项
                defaultProps: {
                    label: (this.$store.state.langCode === 'zh-CN') ? 'cname' : 'ename',
                    children: 'children'
                },
                filterText: ''
            };
        },
        computed : {
            //语言类型
            langType(){
                return this.$store.state.langCode;
            },
            //语言
            language(){
                return this.$store.state.langPackage;
            },

            companyList(){
                var list = [];
                this.getCompanyList(list, this.tree);
                return list;
            },

            isSearchEmpty(){
                if( !this.filterText && !this.companyList.length ){
                    return false;
                }
                for( let item of this.companyList ){
                    if( item.indexOf( this.filterText ) !== -1 ){
                        return false;
                    }
                }
                return true;
            }
        },
        mounted () {
            this.$el.style.left = this.treeStyle.left;
            this.$el.style.top = this.treeStyle.top;
        },
        watch: {
            filterText(val) {
                this.$refs.companyTree.filter(val);
            }
        },
        methods: {
            /**
             * 获取选中的枝干
             * @param data 节点数据
             */
            getChosedTree (data) {
                this.$emit('set-the-branch',data);
            },

            /**
             * 树节点的内容区的渲染 Function
             */
            renderContent(h, params){
                var filterText = this.filterText;
                var nodeValue = params.data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'];
                var companys = [];
                if ( filterText && nodeValue.indexOf( filterText ) !== -1 ) {
                    var tempArr = nodeValue.split( filterText );
                    for(var i = 0; i < tempArr.length; i++){
                        if( tempArr[i] ){
                            companys.push( tempArr[i])
                        }
                        if( i < tempArr.length - 1){
                            companys.push( filterText );
                        }
                    }
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, [
                        companys.map(function ( company ) {
                            return h('span', {
                                class: filterText === company ? 'high-light' : ''
                            }, company);
                        })
                    ]);
                } else {
                    return h('span', {
                        class: 'company-name',
                        directives: [
                            { name: 'w-title', value: nodeValue }
                        ]
                    }, nodeValue);
                }
            },

            /**
             * 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏
             */
            filterNode(value, data, node){
                if (!value) return true;
                return data[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'].indexOf(value) !== -1;
            },

            /**
             * 遍历公司树对象，获取公司列表
             */
            getCompanyList(list, data){
                for( let item of data ){
                    if( item && item.id ){
                        list.push( item[this.$store.state.langCode === 'zh-CN' ? 'cname' : 'ename'] );
                    }
                    if ( item && item.children ){
                        this.getCompanyList( list, item.children );
                    }
                }
            }
        }
    };
</script>
<style lang='scss'>

    .bim-filter-tree{
        min-width: 220px;
        max-width: 400px;
        max-height: 272px;
        transform-origin: center top 0;
        z-index: 2002;
        position: fixed;
        background-color: #fff;
        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
        padding: 6px 0 ;
        overflow-x: hidden;
        overflow-y: auto;
        border: solid 1px #dfe4ed;
        border-radius: 4px;

        .keyword-search{
            width: calc(100% - 40px) !important;
            margin: 8px 0 8px 15px;

            .el-input__inner{
                height: 30px !important;
            }
        }

        .el-tree-node > .el-tree-node__children{
            width: max-content;
        }

        .el-tree-node > .el-tree-node__children{
            min-width: 100%;
            max-width: 100%;
        }

        .el-tree-node__content{
            height: 34px;
            padding-right: 10px;
            color: #333333;

            .el-tree-node__expand-icon {
                margin-left: 10px;
            }

            .company-name{
                display: inline-block;
                width: calc(100% - 25px);
                line-height: 34px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;

                .high-light{
                    color: #077BFF;
                }
            }
        }

        .no-match-message{
            padding: 8px 0 8px 20px;
            color: #C5C5C5;
        }
    }
</style>
